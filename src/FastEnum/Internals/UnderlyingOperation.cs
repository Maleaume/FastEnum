// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
using System; 
using System.Runtime.CompilerServices;
 
namespace FastEnumUtility.Internals
{
       /// <summary>
    /// Provides underlying type specified operation interface.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal interface IUnderlyingOperation<T>
        where T : struct, Enum
    {
        bool IsContinuous { get; }
        bool IsDefined(ref T value);
        bool TryParse(string text, out T result);
        Member<T> GetMember(ref T value);
    } 

    /// <summary>
    /// Provides sbyte specified operation.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal class SByteOperation<T> : Operation<T, sbyte>
        where T : struct, Enum
    {
        #region Inner Classes 
        private sealed class Continuous : Continuous<T, sbyte>
        { 
            public Continuous(sbyte min, sbyte max, Member<T>[] members)
                : base(min, max, members) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override ulong ComputeIndex(sbyte val) => (ulong)(val - this.minValue);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out sbyte x) => sbyte.TryParse(text, out x);
        } 

        private sealed class Discontinuous : Discontinuous<T, sbyte>
        {  
            public Discontinuous(FrozenDictionary<sbyte, Member<T>> memberByValue)
                : base(memberByValue) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out sbyte x) => sbyte.TryParse(text, out x);
        }
        #endregion
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override ulong GetLength(sbyte minValue, sbyte maxValue) => (ulong)(maxValue - minValue);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, sbyte> InstanciateContinuous(sbyte minValue, sbyte maxValue, Member<T>[] members)
            => new Continuous(minValue, maxValue, members);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, sbyte> InstanciateDiscontinuous(FrozenDictionary<sbyte, Member<T>> memberByValue)
            => new Discontinuous(memberByValue);
    } 
    /// <summary>
    /// Provides byte specified operation.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal class ByteOperation<T> : Operation<T, byte>
        where T : struct, Enum
    {
        #region Inner Classes 
        private sealed class Continuous : Continuous<T, byte>
        { 
            public Continuous(byte min, byte max, Member<T>[] members)
                : base(min, max, members) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override ulong ComputeIndex(byte val) => (ulong)(val - this.minValue);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out byte x) => byte.TryParse(text, out x);
        } 

        private sealed class Discontinuous : Discontinuous<T, byte>
        {  
            public Discontinuous(FrozenDictionary<byte, Member<T>> memberByValue)
                : base(memberByValue) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out byte x) => byte.TryParse(text, out x);
        }
        #endregion
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override ulong GetLength(byte minValue, byte maxValue) => (ulong)(maxValue - minValue);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, byte> InstanciateContinuous(byte minValue, byte maxValue, Member<T>[] members)
            => new Continuous(minValue, maxValue, members);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, byte> InstanciateDiscontinuous(FrozenDictionary<byte, Member<T>> memberByValue)
            => new Discontinuous(memberByValue);
    } 
    /// <summary>
    /// Provides short specified operation.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal class Int16Operation<T> : Operation<T, short>
        where T : struct, Enum
    {
        #region Inner Classes 
        private sealed class Continuous : Continuous<T, short>
        { 
            public Continuous(short min, short max, Member<T>[] members)
                : base(min, max, members) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override ulong ComputeIndex(short val) => (ulong)(val - this.minValue);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out short x) => short.TryParse(text, out x);
        } 

        private sealed class Discontinuous : Discontinuous<T, short>
        {  
            public Discontinuous(FrozenDictionary<short, Member<T>> memberByValue)
                : base(memberByValue) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out short x) => short.TryParse(text, out x);
        }
        #endregion
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override ulong GetLength(short minValue, short maxValue) => (ulong)(maxValue - minValue);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, short> InstanciateContinuous(short minValue, short maxValue, Member<T>[] members)
            => new Continuous(minValue, maxValue, members);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, short> InstanciateDiscontinuous(FrozenDictionary<short, Member<T>> memberByValue)
            => new Discontinuous(memberByValue);
    } 
    /// <summary>
    /// Provides ushort specified operation.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal class UInt16Operation<T> : Operation<T, ushort>
        where T : struct, Enum
    {
        #region Inner Classes 
        private sealed class Continuous : Continuous<T, ushort>
        { 
            public Continuous(ushort min, ushort max, Member<T>[] members)
                : base(min, max, members) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override ulong ComputeIndex(ushort val) => (ulong)(val - this.minValue);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out ushort x) => ushort.TryParse(text, out x);
        } 

        private sealed class Discontinuous : Discontinuous<T, ushort>
        {  
            public Discontinuous(FrozenDictionary<ushort, Member<T>> memberByValue)
                : base(memberByValue) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out ushort x) => ushort.TryParse(text, out x);
        }
        #endregion
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override ulong GetLength(ushort minValue, ushort maxValue) => (ulong)(maxValue - minValue);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, ushort> InstanciateContinuous(ushort minValue, ushort maxValue, Member<T>[] members)
            => new Continuous(minValue, maxValue, members);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, ushort> InstanciateDiscontinuous(FrozenDictionary<ushort, Member<T>> memberByValue)
            => new Discontinuous(memberByValue);
    } 
    /// <summary>
    /// Provides int specified operation.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal class Int32Operation<T> : Operation<T, int>
        where T : struct, Enum
    {
        #region Inner Classes 
        private sealed class Continuous : Continuous<T, int>
        { 
            public Continuous(int min, int max, Member<T>[] members)
                : base(min, max, members) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override ulong ComputeIndex(int val) => (ulong)(val - this.minValue);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out int x) => int.TryParse(text, out x);
        } 

        private sealed class Discontinuous : Discontinuous<T, int>
        {  
            public Discontinuous(FrozenDictionary<int, Member<T>> memberByValue)
                : base(memberByValue) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out int x) => int.TryParse(text, out x);
        }
        #endregion
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override ulong GetLength(int minValue, int maxValue) => (ulong)(maxValue - minValue);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, int> InstanciateContinuous(int minValue, int maxValue, Member<T>[] members)
            => new Continuous(minValue, maxValue, members);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, int> InstanciateDiscontinuous(FrozenDictionary<int, Member<T>> memberByValue)
            => new Discontinuous(memberByValue);
    } 
    /// <summary>
    /// Provides uint specified operation.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal class UInt32Operation<T> : Operation<T, uint>
        where T : struct, Enum
    {
        #region Inner Classes 
        private sealed class Continuous : Continuous<T, uint>
        { 
            public Continuous(uint min, uint max, Member<T>[] members)
                : base(min, max, members) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override ulong ComputeIndex(uint val) => (ulong)(val - this.minValue);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out uint x) => uint.TryParse(text, out x);
        } 

        private sealed class Discontinuous : Discontinuous<T, uint>
        {  
            public Discontinuous(FrozenDictionary<uint, Member<T>> memberByValue)
                : base(memberByValue) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out uint x) => uint.TryParse(text, out x);
        }
        #endregion
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override ulong GetLength(uint minValue, uint maxValue) => (ulong)(maxValue - minValue);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, uint> InstanciateContinuous(uint minValue, uint maxValue, Member<T>[] members)
            => new Continuous(minValue, maxValue, members);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, uint> InstanciateDiscontinuous(FrozenDictionary<uint, Member<T>> memberByValue)
            => new Discontinuous(memberByValue);
    } 
    /// <summary>
    /// Provides long specified operation.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal class Int64Operation<T> : Operation<T, long>
        where T : struct, Enum
    {
        #region Inner Classes 
        private sealed class Continuous : Continuous<T, long>
        { 
            public Continuous(long min, long max, Member<T>[] members)
                : base(min, max, members) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override ulong ComputeIndex(long val) => (ulong)(val - this.minValue);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out long x) => long.TryParse(text, out x);
        } 

        private sealed class Discontinuous : Discontinuous<T, long>
        {  
            public Discontinuous(FrozenDictionary<long, Member<T>> memberByValue)
                : base(memberByValue) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out long x) => long.TryParse(text, out x);
        }
        #endregion
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override ulong GetLength(long minValue, long maxValue) => (ulong)(maxValue - minValue);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, long> InstanciateContinuous(long minValue, long maxValue, Member<T>[] members)
            => new Continuous(minValue, maxValue, members);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, long> InstanciateDiscontinuous(FrozenDictionary<long, Member<T>> memberByValue)
            => new Discontinuous(memberByValue);
    } 
    /// <summary>
    /// Provides ulong specified operation.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    internal class UInt64Operation<T> : Operation<T, ulong>
        where T : struct, Enum
    {
        #region Inner Classes 
        private sealed class Continuous : Continuous<T, ulong>
        { 
            public Continuous(ulong min, ulong max, Member<T>[] members)
                : base(min, max, members) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override ulong ComputeIndex(ulong val) => (ulong)(val - this.minValue);
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out ulong x) => ulong.TryParse(text, out x);
        } 

        private sealed class Discontinuous : Discontinuous<T, ulong>
        {  
            public Discontinuous(FrozenDictionary<ulong, Member<T>> memberByValue)
                : base(memberByValue) { }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool TryParse(string text, out ulong x) => ulong.TryParse(text, out x);
        }
        #endregion
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override ulong GetLength(ulong minValue, ulong maxValue) => (ulong)(maxValue - minValue);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, ulong> InstanciateContinuous(ulong minValue, ulong maxValue, Member<T>[] members)
            => new Continuous(minValue, maxValue, members);
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected override UnderlyingOperation<T, ulong> InstanciateDiscontinuous(FrozenDictionary<ulong, Member<T>> memberByValue)
            => new Discontinuous(memberByValue);
    } 
}
